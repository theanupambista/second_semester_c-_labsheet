Structured programming and object-oriented programming are two different approaches to programming. Structured programming is a programming paradigm that focuses on the logical structure of the program and emphasizes procedural programming, while object-oriented programming is a programming paradigm that focuses on the use of objects to represent real-world entities and their interactions.

In structured programming, the program is divided into smaller, more manageable parts, called functions or procedures. These functions are written in a step-by-step manner and do not interact with each other beyond passing data back and forth. Structured programming languages include C and Pascal.

In contrast, object-oriented programming focuses on the use of objects, which are instances of classes that encapsulate data and behavior. Objects interact with each other by sending messages, which trigger methods to execute. Object-oriented programming languages include C++, Java, and Python.

Inheritance:

Inheritance is a key feature of object-oriented programming that allows a class to inherit properties and behavior from a parent class. The child class, or subclass, can override or extend the properties and behavior of the parent class, or superclass.

Here is an example of inheritance in C++:

#include <iostream>
using namespace std;

class Animal {
public:
    void eat() {
        cout << "Animal is eating" << endl;
    }
};

class Dog : public Animal {
public:
    void bark() {
        cout << "Dog is barking" << endl;
    }
};

int main() {
    Dog dog;
    dog.eat();  // inherited from Animal class
    dog.bark(); // defined in Dog class
    return 0;
}
In this example, we define an Animal class with a eat method. We then define a Dog class that inherits from the Animal class using the public access modifier. The Dog class has a bark method in addition to the eat method inherited from the Animal class.

In the main function, we create an instance of the Dog class and call its eat and bark methods. The eat method is inherited from the Animal class, while the bark method is defined in the Dog class.

Polymorphism:

Polymorphism is another key feature of object-oriented programming that allows a subclass to be used as if it were a parent class. This means that an object of the subclass can be assigned to a variable of the parent class type and can be used in the same way as an object of the parent class.

Here is an example of polymorphism in C++:

#include <iostream>
using namespace std;

class Shape {
public:
    virtual void draw() {
        cout << "Drawing a shape" << endl;
    }
};

class Circle : public Shape {
public:
    void draw() override {
        cout << "Drawing a circle" << endl;
    }
};

class Square : public Shape {
public:
    void draw() override {
        cout << "Drawing a square" << endl;
    }
};

int main() {
    Shape *shape;
    Circle circle;
    Square square;

    shape = &circle;
    shape->draw(); // calls Circle's draw method

    shape = &square;
    shape->draw(); // calls Square's draw method

    return 0;
}
In this example, we define a Shape class with a draw method, which is marked as virtual. We then define a Circle class and a Square class that inherit from the Shape class and override the draw method.